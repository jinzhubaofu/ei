{"version":3,"file":"ei.js","sources":["../src/util/invariant.js","../src/Emitter.js","../src/events.js","../src/Router.js","../src/env.js","../src/util/assign.js","../src/util/createAppComponent.js","../src/App.js","../src/actionCreator/page.js","../src/util/guid.js","../src/component/Page.js","../src/middleware/pageActionEventProxy.js","../src/util/createPageComponent.js","../src/Page.js","../src/Container.js","../src/resource.js","../src/index.js"],"sourcesContent":["/**\n * @file invariant\n * @author Leon(leon@outlook.com)\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n/* eslint-disable max-params */\n\n/**\n * 断言\n *\n * @ignore\n *\n * @param {boolean}     condition 断言条件\n * @param {string}      format 断言失败消息模板\n * @param {*} a 断言失败消息数据\n * @param {*} b 断言失败消息数据\n * @param {*} c 断言失败消息数据\n * @param {*} d 断言失败消息数据\n * @param {*} e 断言失败消息数据\n * @param {*} f 断言失败消息数据\n */\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n\n    if (condition) {\n        return;\n    }\n\n    if (!format) {\n        throw new Error(''\n            + 'Minified exception occurred; use the non-minified dev environment '\n            + 'for the full error message and additional helpful warnings.'\n        );\n    }\n\n    const args = [a, b, c, d, e, f];\n    let argIndex = 0;\n\n    const message = ''\n        + 'Invariant Violation: '\n        + format.replace(/%s/g, function () {\n            return args[argIndex++];\n        });\n\n    throw new Error(message);\n\n}\n\n/* eslint-enable max-params */\n","/**\n * @file Emitter\n * @author Leon(leon@outlook.com)\n */\n\nconst EMITTER_LISTENER_POOL_ATTR = '__listeners__';\nconst EMITTER_CURRENT_EVENT_ATTR = '__event__';\n\nexport default class Emitter {\n\n    /**\n     * 添加事件处理函数\n     *\n     * @public\n     * @param {!string} name 事件名称\n     * @param {!Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    on(name, handler) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (!pool) {\n            pool = this[EMITTER_LISTENER_POOL_ATTR] = {};\n        }\n\n        let listeners = pool[name];\n\n        if (!listeners) {\n            listeners = pool[name] = [];\n        }\n\n        listeners.push(handler);\n\n        return this;\n    }\n\n    /**\n     * 取消事件处理\n     *\n     * @public\n     * @param {?string} name 事件名称\n     * @param {?Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    off(name, handler) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (!pool) {\n            return this;\n        }\n\n        if (!name) {\n            return this.destroyEvents();\n        }\n\n        const listeners = pool[name];\n\n        if (!listeners || !listeners.length) {\n            return this;\n        }\n\n        // 没有指定移除的回调函数，那么移除所有的\n        if (!handler) {\n            listeners.length = 0;\n            pool[name] = [];\n            return this;\n        }\n\n        // 找到指定的回调函数，移除它\n        for (let i = listeners.length - 1; i >= 0; --i) {\n            if (listeners[i] === handler) {\n                listeners.splice(i, 1);\n                return this;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * 添加一个只回调一次的事件处理函数\n     *\n     * @public\n     * @param {!string} name 事件类型\n     * @param {!Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    once(name, handler) {\n\n        const me = this;\n\n        function onceHandler(...args) {\n            me.off(name, onceHandler);\n            return handler.apply(me, args);\n        }\n\n        me.on(name, onceHandler);\n\n        return this;\n\n    }\n\n\n    /**\n     * 释放事件\n     *\n     * @public\n     * @param {string} name 事件名称\n     * @param {...*}   args 事件附带参数\n     * @return {module:Emitter}\n     */\n    emit(name, ...args) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        // 连pool都没有，那真是一个回调都没有，那么直接返回\n        if (!pool) {\n            return this;\n        }\n\n        // 把*和指定事件类型的事件回调合并在一起\n        const listeners = [].concat(pool[name] || [], pool['*'] || []);\n\n        // 如果没有回调函数，那么直接返回\n        if (!listeners.length) {\n            return this;\n        }\n\n        this[EMITTER_CURRENT_EVENT_ATTR] = name;\n\n        for (let i = 0, len = listeners.length; i < len; ++i) {\n            listeners[i].apply(this, args);\n        }\n\n        this[EMITTER_CURRENT_EVENT_ATTR] = null;\n\n        return this;\n\n    }\n\n    /**\n     * 获取当前正在派发的事件\n     *\n     * @public\n     * @return {?string}\n     */\n    getCurrentEvent() {\n        return this[EMITTER_CURRENT_EVENT_ATTR];\n    }\n\n    /**\n     * 销毁所有的事件\n     *\n     * @public\n     * @return {module:Emitter}\n     */\n    destroyEvents() {\n\n        const pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (pool) {\n\n            /* eslint-disable fecs-use-for-of */\n            for (let type in pool) {\n                if (pool[type]) {\n                    pool[type].length = 0;\n                    pool[type] = null;\n                }\n            }\n            /* eslint-enable fecs-use-for-of */\n\n            this[EMITTER_LISTENER_POOL_ATTR] = null;\n\n        }\n\n        return this;\n\n    }\n\n}\n","/**\n * @file ei系统消息总线\n * @author Leon(leon@outlook.com)\n * @module events\n */\n\nimport Emitter from './Emitter';\n\nexport default new Emitter();\n","/**\n * @file Router\n * @author Leon(leon@outlook.com)\n */\n\nexport default class Router {\n\n    /**\n     * 简易的路由器\n     *\n     * @constructor Router\n     * @param {Array.<Object>} routes 路由配置\n     */\n    constructor(routes = []) {\n        this.routes = routes;\n    }\n\n    /**\n     * 对一个请求进行路由\n     *\n     * @param {!Object} request 请求对象\n     * @return {?Object}\n     */\n    route(request) {\n        for (let i = this.routes.length - 1; i >= 0; i--) {\n            let route = this.routes[i];\n            if (route.path === request.pathname) {\n                return route;\n            }\n        }\n    }\n\n    /**\n     * 添加路由配置\n     *\n     * @param {!Object} config 配置\n     * @return {module:Route}\n     */\n    addRoute(config) {\n        this.routes.push(config);\n        return this;\n    }\n\n}\n","/**\n * @file 环境探测\n * @author Leon(leon@outlook.com)\n * @module env\n * @inner\n */\n\n/**\n * 是否为服务器端环境\n *\n * @member {boolean}\n */\nlet isServer = false;\n\n/**\n * 是否为客户端环境\n *\n * @member {boolean}\n */\nlet isClient = false;\n\ntry {\n    isServer = (\n        'object' === typeof process\n        && Object.prototype.toString.call(process) === '[object process]'\n    );\n    isClient = !isServer;\n}\ncatch (e) {\n    isClient = true;\n}\n\n\nexport {\n    isServer,\n    isClient\n};\n","/**\n * @file es6 Object.assign polyfill\n * @author leon(ludafa@outlook.com)\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default Object.assign || function (target, ...sources) {\n\n    if (target == null) {\n        throw new Error('assign target cannot be null');\n    }\n\n    for (let i = 0, len = sources.length; i < len; ++i) {\n\n        const source = sources[i];\n\n        if (typeof source !== 'object') {\n            continue;\n        }\n\n        /* eslint-disable fecs-use-for-of */\n        for (let key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n        /* eslint-enable fecs-use-for-of */\n\n    }\n\n    return target;\n};\n","/**\n * @file create app component\n * @author leon(ludafa@outlook.com)\n */\n\nimport {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function createAppComponent(App) {\n\n    class AppComponent extends PureComponent {\n\n        static propTypes = {\n            routes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    path: PropTypes.string.isRequired,\n                    page: PropTypes.oneOfType([\n                        PropTypes.string,\n                        PropTypes.func\n                    ]).isRequired\n                })\n            ),\n            app: PropTypes.instanceOf(App),\n            router: PropTypes.object\n        };\n\n        static childContextTypes = {\n            route: PropTypes.func,\n            loadPage: PropTypes.func\n        };\n\n        constructor() {\n\n            super();\n\n            const {routes, router, app} = this.props;\n\n            this.app = app || new App({routes, router});\n\n            this.state = {};\n\n        }\n\n        getChildContext() {\n\n            const app = this.app;\n\n            return {\n                route(request) {\n                    return app.route(request);\n                },\n                loadPage(pageModuleId) {\n                    return app.loadPage(pageModuleId);\n                }\n            };\n\n        }\n\n        render() {\n            return this.props.children;\n        }\n    }\n\n    return AppComponent;\n\n}\n","/**\n * @file App\n * @author Leon(leon@outlook.com)\n */\n\nimport invariant from './util/invariant';\nimport events from './events';\nimport Router from './Router';\nimport * as env from './env';\nimport assign from './util/assign';\nimport createAppComponent from './util/createAppComponent';\n\n/* eslint-disable fecs-prefer-class */\n\n/**\n * App\n *\n * @constructor\n * @param {!Object} options 参数\n * @param {Array.Object} options.routes 路由配置\n */\nexport default class App {\n\n    static Component = createAppComponent(App);\n\n    constructor(options = {}) {\n\n        invariant(options, 'App need options');\n        invariant(options.routes || options.router, 'App need routes/router');\n\n        assign(this, options);\n\n        /**\n         * 路由器\n         *\n         * @member {module:Router}\n         */\n        this.router = this.router || new Router(this.routes);\n    }\n\n    /**\n     * 处理一个请求\n     *\n     * @param {!Object}  request      请求\n     * @param {boolean}  needRawState 是否需要未经加工的page数据\n     * @return {Promise}\n     *\n     * @fires module:events~app-request\n     * @fires module:events~app-get-initial-state\n     * @fires module:events~app-get-initial-state-succeed\n     * @fires module:events~app-get-initial-state-failed\n     * @fires module:events~app-response-in-json\n     * @fires module:events~app-response-in-html\n     * @fires module:events~app-page-loaded\n     * @fires module:events~app-page-bootstrap\n     * @fires module:events~app-page-bootstrap-succeed\n     */\n    execute(request, needRawState) {\n\n        invariant(env.isServer, 'App.execute() must run on server');\n\n        /**\n         * @event module:events~app-request\n         */\n        events.emit('app-request');\n\n        const route = this.route(request);\n\n        if (!route) {\n            return Promise.reject({\n                status: 404\n            });\n        }\n\n        return this\n\n            // 加载页面模块\n            .loadPage(route.page)\n\n            // 加载初始化数据\n            .then(Page => {\n\n                const page = new Page();\n\n                return Promise\n                    // 这里一定要用 Promise 包裹一下，这个接口可以返回 Promise 或者是 *\n                    .resolve(page.getInitialState(request))\n                    .then(state => {\n\n                        if (needRawState) {\n\n                            /**\n                             * @event module:events~app-response-in-json\n                             */\n                            events.emit('app-response-in-json');\n\n                            return {\n                                state,\n                                route\n                            };\n\n                        }\n\n                        /**\n                         * @event module:events~app-response-in-html\n                         */\n                        events.emit('app-response-in-html');\n\n                        // 触发 page 的初始归并\n                        page.init(state);\n\n                        /**\n                         * @event module:events~app-page-bootstrap\n                         */\n                        events.emit('app-page-bootstrap');\n\n                        /**\n                         * @event module:events~app-page-bootstrap\n                         */\n                        events.emit('app-page-entered');\n\n                        return {\n                            page,\n                            route\n                        };\n\n                    });\n\n            })\n            .catch(function (error) {\n                events.emit('app-execute-error', error);\n                throw error;\n            });\n\n    }\n\n    /**\n     * 根目录路径\n     *\n     * @public\n     *\n     * @param {!string} basePath 根目录路径\n     *\n     * @return {module:App}\n     */\n    setBasePath(basePath) {\n        this.basePath = basePath;\n        return this;\n    }\n\n    /**\n     * 加载Page类\n     *\n     * @protected\n     *\n     * @param {!string} page 页面模块路径\n     *\n     * @return {Promise}\n     *\n     * @fires module:events~app-page-loaded\n     * @fires module:events~app-load-page-on-server\n     * @fires module:events~app-load-page-on-client\n     */\n    loadPage(page) {\n\n        if (typeof page === 'function') {\n            return Promise.resolve(page);\n        }\n\n        const pool = this.pool;\n\n        if (pool && pool[page]) {\n\n            /**\n             * @event module:events~app-page-loaded\n             */\n            events.emit('app-page-loaded');\n\n            return Promise.resolve(pool[page]);\n        }\n\n        const loadMethodName = env.isServer ? 'resolveServerModule' : 'resolveClientModule';\n\n        return this[loadMethodName](page).then(Page => this.resolvePage(Page));\n\n    }\n\n    /**\n     * 解析 Page 类\n     *\n     * @protected\n     *\n     * @param {Object|Function} Page 页面模块\n     *\n     * @return {Promise}\n     */\n    resolvePage(Page) {\n\n        // @hack\n        // 这种是 commonjs/amd 直接返回的 Page\n        if (typeof Page === 'function') {\n            return Page;\n        }\n\n        // 这种是 export default 输出的\n        return Page.default;\n\n    }\n\n    /**\n     * 服务器端加载Page模块\n     *\n     * @private\n     *\n     * @param {string} moduleId Page模块id\n     *\n     * @return {Promise}\n     */\n    resolveServerModule(moduleId) {\n\n        /**\n         * @event module:events~app-load-page-on-server\n         */\n        events.emit('app-load-page-on-server', moduleId);\n\n        const basePath = this.basePath;\n\n        invariant(basePath, 'ei need a basePath to resolve your page');\n\n        const path = basePath + '/' + moduleId;\n\n        return new Promise((resolve, reject) => {\n\n            try {\n\n                /* eslint-disable */\n                const Page = require(path);\n                /* eslint-enable */\n\n                let pool = this.pool;\n\n                if (!pool) {\n                    pool = this.pool = {};\n                }\n\n                pool[moduleId] = Page;\n\n                resolve(Page);\n            }\n            catch (e) {\n                reject(e);\n            }\n\n        });\n\n    }\n\n    /**\n     * 在客户端上加载Page模块\n     *\n     * @private\n     *\n     * @param {string} moduleId Page模块id\n     *\n     * @return {Promise}\n     */\n    resolveClientModule(moduleId) {\n\n        /**\n         * @event module:events~app-load-page-on-client\n         */\n        events.emit('app-load-page-on-client');\n\n        if (!moduleId) {\n            return Promise.reject(new Error('need page module id'));\n        }\n\n        return new Promise(function (resolve, reject) {\n\n            window.require([moduleId], function (Page) {\n                resolve(Page);\n            });\n\n        });\n\n    }\n\n    /**\n     * 路由\n     *\n     * @protected\n     *\n     * @param {!Object} request 请求\n     *\n     * @return {?Object}\n     *\n     * @fires module:events~app-route-succeed\n     * @fires module:events~app-route-succeed\n     * @fires module:events~app-route-failed\n     */\n    route(request) {\n\n        /**\n         * @event module:events~app-route\n         */\n        events.emit('app-route');\n\n        const config = this.router.route(request);\n\n        if (config) {\n\n            /**\n             * @event module:events~app-route-succeed\n             */\n            events.emit('app-route-succeed');\n\n        }\n        else {\n\n            /**\n             * @event module:events~app-route-failed\n             */\n            events.emit('app-route-failed', request);\n        }\n\n        return config;\n\n    }\n}\n","/**\n * @file page init action creator\n * @author leon(ludafa@outlook.com)\n */\n\nexport const INIT = 'ei/INIT';\n\nexport function init(payload) {\n    return {\n        type: INIT,\n        payload\n    };\n}\n\nexport const REPLACE = 'ei/REPLACE';\n\nexport function replace(payload) {\n    return {\n        type: REPLACE,\n        payload\n    };\n}\n","/**\n * @file guid\n * @author leon(ludafa@outlook.com)\n */\n\nexport default function () {\n    return Math.random().toString(36).substr(2, 12);\n}\n","/**\n * @file 可进行路由的 Page\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport guid from '../util/guid';\n\nconst ASYNC_PAGE_LOAD_ATTR = 'ASYNC_PAGE_LOAD_ATTR';\n\n/* eslint-disable fecs-prefer-class */\n\nexport default class Page extends PureComponent {\n\n    static displayName = 'Page';\n\n    static contextTypes = {\n        route: PropTypes.func,\n        loadPage: PropTypes.func\n    };\n\n    static propTypes = {\n        request: PropTypes.shape({\n            pathname: PropTypes.string.isRequired,\n            query: PropTypes.object,\n            search: PropTypes.string\n        }),\n        initialState: PropTypes.any,\n        renderLoadingMessage: PropTypes.func,\n        renderErrorMessage: PropTypes.func\n    };\n\n    static defaultProps = {\n\n        renderErrorMessage(error) {\n            return (\n                <span>{error.message}</span>\n            );\n        },\n\n        renderLoadingMessage() {\n            return (<span>loading...</span>);\n        }\n\n    };\n\n    state = {\n        pendding: false,\n        ready: false,\n        error: null\n    };\n\n    componentDidMount() {\n        let {initialState, request} = this.props;\n        this.renderPage(request, initialState);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const request = this.props.request || {};\n        const {pathname, search} = request;\n        const nextRequest = nextProps.request;\n\n        if (\n            request !== nextRequest\n            && (pathname !== nextRequest.pathname || search !== nextRequest.search)\n        ) {\n            this.renderPage(nextRequest, null);\n        }\n\n    }\n\n    renderPage(request, initialState) {\n\n        const route = this.context.route(request);\n\n        if (!route) {\n\n            this.setState({\n                ready: false,\n                error: {\n                    status: 404,\n                    message: '啊哦，这个页面迷失在了茫茫宇宙中。。。'\n                },\n                pendding: false,\n                Page: null\n            });\n\n            return;\n        }\n\n        this.setState({\n            pendding: true,\n            error: null,\n            ready: false\n        });\n\n        const token = this[ASYNC_PAGE_LOAD_ATTR] = guid();\n\n        this\n            .context\n            .loadPage(route.page)\n            .then(Page => {\n\n                // 对照 token\n                // 如果 token 未变化，才能进行渲染\n                // 如果 token 已发生变化 ，那么吞掉渲染\n                if (token === this[ASYNC_PAGE_LOAD_ATTR]) {\n                    this.setState({\n                        Page,\n                        error: null,\n                        pendding: false,\n                        ready: true\n                    });\n                }\n\n            })\n            ['catch'](error => {\n\n                // 对照 token\n                // 如果 token 未变化，才能进行渲染\n                // 如果 token 已发生变化 ，那么吞掉渲染\n                if (token === this[ASYNC_PAGE_LOAD_ATTR]) {\n                    this.setState({\n                        error,\n                        ready: false,\n                        pendding: false,\n                        Page: null\n                    });\n                }\n\n            });\n\n    }\n\n    onRedirect(action) {\n\n        const onRedirect = this.props.onRedirect;\n\n        if (onRedirect) {\n            onRedirect(action);\n            return;\n        }\n\n        this.renderPage(action.payload.location);\n\n    }\n\n    render() {\n\n        const {\n            request,\n            renderLoadingMessage,\n            renderErrorMessage,\n            ...rest\n        } = this.props;\n\n        const {ready, pendding, Page, error} = this.state;\n\n        let state = 'blank';\n        let content = null;\n\n        // 如果 request 是空的，那么我们认为它相当于 iframe src=\"about:blank\"\n        if (request != null) {\n\n            if (error) {\n                content = renderErrorMessage(error);\n                state = 'error';\n            }\n            else if (pendding) {\n                content = renderLoadingMessage();\n                state = 'pendding';\n            }\n            else if (ready) {\n                try {\n                    content = (\n                        <Page.Component\n                            {...rest}\n                            renderLoadingMessage={renderLoadingMessage}\n                            renderErrorMessage={renderErrorMessage}\n                            onRedirect={this.onRedirect}\n                            request={request} />\n                    );\n                    state = 'ready';\n                }\n                catch (e) {\n                    content = renderErrorMessage(e);\n                    state = 'error';\n                }\n            }\n        }\n\n        return (\n            <div className={`ui-page state-${state}`}>\n                {content}\n            </div>\n        );\n\n    }\n\n}\n","/**\n * @file page action event proxy\n * @author leon(ludafa@outlook.com)\n */\n\nexport default function (page) {\n\n    return store => next => action => {\n\n        if (typeof action !== 'function') {\n            let {event, type} = action;\n            page.emit(event || type, action);\n        }\n\n        return next(action);\n\n    };\n\n}\n","/**\n * @file create a component class for Page\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PureComponent} from 'react';\nimport guid from '../util/guid';\nimport PropTypes from 'prop-types';\n\nconst PAGE_GET_INITIAL_STATE_GUID_ATTR = 'PAGE_GET_INITIAL_STATE_GUID_ATTR';\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport default function createPageComponent(Page) {\n\n    class PageComponent extends PureComponent {\n\n        static displayName = 'PageComponent';\n\n        constructor() {\n\n            super();\n\n            const {initialState} = this.props;\n\n            const page = this.page = new Page(initialState);\n\n            // 添加事件代理\n            page.on('*', (...args) => {\n\n                const eventName = page.getCurrentEvent()\n                    .split(/[\\-_]/)\n                    .map(term => term.charAt(0).toUpperCase() + term.slice(1).toLowerCase())\n                    .join('');\n\n                const handler = this.props[`on${eventName}`];\n\n                if (typeof handler === 'function') {\n                    handler.apply(this, args);\n                }\n\n            });\n\n            this.state = {\n                stage: initialState == null ? 'INITED' : 'LOADED',\n                error: null\n            };\n\n        }\n\n        componentDidMount() {\n\n            const {handleRequest, page, props} = this;\n            const stage = this.state.stage;\n\n            if (stage === 'LOADED') {\n                return;\n            }\n\n            handleRequest(page, props.request);\n\n        }\n\n\n        componentWillReceiveProps(nextProps) {\n\n            const request = this.props.request;\n            const nextRequest = nextProps.request;\n\n            if (request !== nextRequest) {\n                this.handleRequest(this.page, nextRequest);\n            }\n\n        }\n\n        componentWillUnmount() {\n            const page = this.page;\n            if (page) {\n                page.dispose();\n            }\n            this.page = null;\n        }\n\n        handleRequest(page, request) {\n\n            // 我们使用一个不会重复的 token 来完成 promise abort 的处理\n            // 每次我们发起异步请求时都会生成一个唯一的 token\n            // 当异步请求完成时会检查 token 是否还是一致的\n            // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了\n            const token = this[PAGE_GET_INITIAL_STATE_GUID_ATTR] = guid();\n\n            this.setState({\n                stage: 'LOADING',\n                error: null\n            });\n\n            Promise.resolve(page.getInitialState(request))\n                .then(state => {\n\n                    page.init(state);\n\n                    // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了！\n                    if (token === this[PAGE_GET_INITIAL_STATE_GUID_ATTR]) {\n                        this.setState({\n                            stage: 'LOADED'\n                        });\n                    }\n\n                }, error => {\n\n                    // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了~\n                    if (token === this[PAGE_GET_INITIAL_STATE_GUID_ATTR]) {\n                        this.setState({\n                            error,\n                            stage: 'LOADED'\n                        });\n                    }\n\n                });\n        }\n\n        render() {\n\n            const {page, props} = this;\n            const {error, stage} = this.state;\n\n            const {\n                renderLoadingMessage,\n                renderErrorMessage\n            } = props;\n\n            if (error) {\n                return renderErrorMessage(error);\n            }\n\n            return stage === 'LOADED'\n                ? page.createElement(getCustomProps(props))\n                : renderLoadingMessage();\n\n        }\n\n    }\n\n    PageComponent.propTypes = {\n        initialState: PropTypes.object,\n        request: PropTypes.object,\n        renderLoadingMessage: PropTypes.func,\n        renderErrorMessage: PropTypes.func\n    };\n\n    PageComponent.defaultProps = {\n        initialState: null,\n        request: {},\n        renderLoadingMessage() {\n            return (\n                <div>loading...</div>\n            );\n        },\n        renderErrorMessage(error) {\n            return (\n                <div>{error.message}</div>\n            );\n        }\n    };\n\n    function getCustomProps(props) {\n\n        const result = {};\n\n        /* eslint-disable fecs-use-for-of */\n        for (const name in props) {\n            if (hasOwn.call(props, name) && !(name in PageComponent.propTypes)) {\n                result[name] = props[name];\n            }\n        }\n        /* eslint-enable fecs-use-for-of */\n\n        return result;\n\n    }\n\n    return PageComponent;\n\n}\n","/**\n * @file 页面\n * @author Leon(leon@outlook.com)\n *\n * @requires react\n */\n\nimport React from 'react';\nimport assign from './util/assign';\nimport {REPLACE, replace, init} from './actionCreator/page';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux';\nimport invariant from './util/invariant';\nimport guid from './util/guid';\nimport events from './events';\nimport Emitter from './Emitter';\nimport PageComponent from './component/Page';\nimport pageActionEventProxy from './middleware/pageActionEventProxy';\nimport createPageComponent from './util/createPageComponent';\nimport * as env from './env';\n\nexport default class Page extends Emitter {\n\n    /**\n     * 生成Page子类\n     *\n     * @param {!Object} proto 扩展Page的配置\n     * @return {Function}\n     */\n    static extend = function (proto) {\n\n        invariant(proto, 'create Page need options');\n\n        invariant(proto.reducer, 'Pager must have a reducer');\n\n        invariant(proto.view, 'Pager must have a view');\n\n        /**\n         * SubPage\n         *\n         * @class\n         * @param {*} initialState 脱水状态\n         */\n        class SubPage extends Page {\n        }\n\n        assign(SubPage.prototype, proto);\n\n        SubPage.Component = createPageComponent(SubPage);\n\n        return SubPage;\n\n    };\n\n    static Component = PageComponent;\n\n    /**\n     * 页面\n     *\n     * @constructor\n     * @param {*} initialState 初始数据状态\n     */\n    constructor(initialState) {\n        super();\n        this.middlewares = [\n            pageActionEventProxy\n        ];\n        this.initialize(initialState);\n    }\n\n    /**\n     * 构造函数\n     *\n     * @param {*} initialState 初始数据\n     */\n    initialize(initialState) {\n\n        this.id = guid();\n\n        let reducer = this.reducer || this.constructor.reducer;\n\n        if (typeof reducer === 'object') {\n            reducer = combineReducers(this.reducer);\n        }\n\n        let enhancer = compose;\n\n        if (\n            process.env.NODE_ENV !== 'production'\n            && env.isClient\n            && window\n            && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ) {\n            enhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                name: `ei-page@${this.id}`\n            });\n        }\n\n        this.context = createStore(\n            (state, action) => {\n                if (action.type === REPLACE) {\n                    return action.payload;\n                }\n                return reducer(state, action);\n            },\n            initialState,\n            enhancer(\n                applyMiddleware(\n                    ...this.middlewares.map(middleware => middleware(this))\n                )\n            )\n        );\n\n    }\n\n    /**\n     * 初始化\n     *\n     * 此方法只会被调用一次\n     *\n     * 处理请求的过程中，在页面实例化后，会被调用到此方法\n     *\n     * 此方法会派发一个init动作，并附带有getInitialState方法所返回的数据\n     *\n     * init动作提供给页面的初始数据剪裁的时机\n     *\n     * 但是只有在execute的情况下才会被调用，\n     * 我们在bootstrap时传入的initialState是已经是剪裁好的数据\n     * 也就是在server端预渲染后向client端同步数据状态的场景\n     *\n     *\n     * @TODO 通过page的stage来保证此动作只能触发一次\n     *\n     * @public\n     * @param {*} initialState 初始状态\n     * @return {module:Page}\n     */\n    init(initialState) {\n        this.dispatch(init(initialState));\n        return this;\n    }\n\n    /**\n     * 使用当前上下文中的数据，创建一个可提渲染使用的react元素\n     *\n     * @public\n     *\n     * @param {?Object} props 视图属性\n     * @notice 此参数一般不需要使用，只有在 Page 作为子组件时使用\n     * @return {ReactElement}\n     */\n    createElement(props) {\n\n        const context = this.context;\n        const View = this.view || this.constructor.view;\n\n        return (\n            <Provider store={context}>\n                <View {...props} />\n            </Provider>\n        );\n\n    }\n\n    /**\n     * 返回当前上下文中的所有数据\n     *\n     * 此方法用于将服务器端的页面数据，同步到客户端上\n     *\n     * @public\n     *\n     * @return {*}\n     */\n    getState() {\n        return this.context.getState();\n    }\n\n    /**\n     * 设置当前上下文中的所有数据\n     *\n     * @param {*} state 数据\n     * @return {module:Page}\n     */\n    setState(state) {\n        this.context.dispatch(replace(state));\n        return this;\n    }\n\n    /**\n     * 派发一个动作，激活相应的数据剪切和视图更新\n     *\n     * @public\n     *\n     * @method module:Page#dispatch\n     *\n     * @param {(Object | Function)} action 动作\n     *\n     * @return {Object}\n     *\n     * @fires module:events~page-dispatch\n     */\n    dispatch(action) {\n\n        /**\n         * @event module:events~page-dispatch\n         * @param {(Object | Function)} action 动作\n         */\n        events.emit('page-dispatch', action);\n\n        this.emit('dispatch', action);\n\n        this.context.dispatch(action);\n\n        return action;\n\n    }\n\n    /**\n     * 获取页面初始数据\n     *\n     * 页面在启动时，一般都会需要通过操作资源来获取数据作为初始数据\n     *\n     * 并且，这个过程一般还需要使用当前`请求`来完成决策\n     *\n     * 在app中接收到请求后会加载路由中指定的Page模块，将其实例化后，执行此方法\n     *\n     * @todo page需要有一个状态标识，new / inited / rendered / disposed\n     *\n     * @public\n     *\n     * @param {Object} request 请求\n     *\n     * @return {Promise}\n     */\n    getInitialState(request) {\n        return {};\n    }\n\n    /**\n     * 销毁页面\n     *\n     * @return {module:Page}\n     */\n    dispose() {\n\n        /**\n         * @event module:event~page-dispose\n         */\n        events.emit('page-dispose');\n\n        this.emit('dispose');\n\n        // @TODO 补充销毁时的必要处理\n\n        return this;\n    }\n\n}\n","/**\n * @file bean container copy from inverse\n * @author Leon(leon@outlook.com)\n */\n\nexport default class Container {\n\n    /**\n     * IOC窗口\n     *\n     * @constructor Container\n     */\n    constructor() {\n        this.boundCallbacks = {};\n        this.singletonCallbacks = {};\n        this.instantiatedSingletons = {};\n        this.registeredObjects = {};\n    }\n\n    /**\n     * 生成一个指定的实例\n     *\n     * @public\n     * @param {!string} name 资源标识符\n     * @return {*}\n     */\n    make(name) {\n\n        /* eslint-disable prefer-rest-params */\n\n        if (this.registeredObjects[name]) {\n            return this.registeredObjects[name];\n        }\n\n        if (this.singletonCallbacks[name]) {\n\n            const instances = this.instantiatedSingletons;\n            let instance = instances[name];\n\n            if (!instance) {\n                instance\n                    = instances[name]\n                    = this.singletonCallbacks[name].apply(this, arguments);\n            }\n\n            return instance;\n        }\n\n\n        const boundCallback = this.boundCallbacks[name];\n\n        return boundCallback ? boundCallback.apply(this, arguments) : null;\n\n        /* eslint-enable prefer-rest-params */\n\n    }\n\n    /**\n     * 绑定一个factory\n     *\n     * 当请求这个资源时会通过factory生成新的实例\n     * 每次都会生成一个新的实例\n     *\n     * @param {!string}   name    资源标识符\n     * @param {!Function} factory 工厂函数\n     * @return {module:Container}\n     */\n    bind(name, factory) {\n        this.boundCallbacks[name] = factory;\n        return this;\n    }\n\n    /**\n     * 注册一个单例资源\n     *\n     * 当请求这个资源时会通过factory生成新的实例\n     * 但是只会生成一个此类资源\n     *\n     * @param {!string}   name    资源标识符\n     * @param {!Function} factory 资源工厂函数\n     * @return {module:Container}\n     */\n    singleton(name, factory) {\n        this.singletonCallbacks[name] = factory;\n        return this;\n    }\n\n    /**\n     * 注册一个资源\n     *\n     * 这个与bind和singleton的区别是，\n     * 这里直接注册一个资源，给的是个object，而不是工厂函数\n     * 不会经过工厂函数创建资源实例了\n     *\n     * @param {!string} name   资源标识符\n     * @param {*}       object 资源对象\n     * @return {module:Container}\n     */\n    register(name, object) {\n        this.registeredObjects[name] = object;\n        return this;\n    }\n\n}\n","/**\n * @file 资源容器\n *\n * 我们知道在客户端上，我们只能使用ajax/socket两种途径操纵资源\n * 而在服务器端上，可选的资源服务非常多，比如mysql/mongodb/redis或者他们数据服务\n *\n * 因此，我们提供了这个模块，用来处理资源在不同平台上的差异性\n *\n * 我们通过ioc容器来对资源依赖进行解耦，\n *\n * 在不同平台上注入相同接口的资源操纵对象，\n *\n * 在同构代码中使用`get`方法获取到这些对象，直接使用即可\n *\n * @author Leon(leon@outlook.com)\n * @module resource\n */\n\nimport Container from './Container';\n\nconst container = new Container();\n\n/**\n * 注册一个资源操作对象\n *\n * @method module:Resource.reigist\n *\n * @param {!string} type 资源标识符\n * @param {(Object | Function)} resource 资源操纵对象\n *\n * @return {module:Resource}\n */\nexport function register(type, resource) {\n    container.register(type, resource);\n    return this;\n}\n\n/**\n * 获取一个资源操作对象\n *\n * @method module:Resource.get\n *\n * @param {!string} type 资源标识符\n *\n * @return {(Object | Function)}\n */\nexport function get(type) {\n    return container.make(type);\n}\n","/**\n * @file ei主入口\n * @author Leon(leon@outlook.com)\n * @module ei\n */\n\nimport App from './App';\nimport Page from './Page';\nimport Container from './Container';\nimport events from './events';\nimport * as resource from './resource';\n\nimport {\n    INIT,\n    REPLACE,\n    init,\n    replace\n} from './actionCreator/page';\n\nexport {\n    App,\n    Page,\n    Container,\n    events,\n    resource\n};\n\nexport const actionTypes = {\n    INIT,\n    REPLACE\n};\n\nexport const actions = {\n    init,\n    replace\n};\n"],"names":["invariant","condition","format","a","b","c","d","e","f","Error","args","argIndex","message","replace","EMITTER_LISTENER_POOL_ATTR","EMITTER_CURRENT_EVENT_ATTR","Emitter","on","name","handler","pool","listeners","push","off","destroyEvents","length","i","splice","once","me","onceHandler","apply","emit","concat","len","getCurrentEvent","type","Router","routes","route","request","path","pathname","addRoute","config","isServer","isClient","process","Object","prototype","toString","call","hasOwnProperty","assign","target","sources","source","key","createAppComponent","App","AppComponent","props","router","app","state","getChildContext","pageModuleId","loadPage","render","children","PureComponent","propTypes","PropTypes","arrayOf","shape","string","isRequired","oneOfType","func","instanceOf","object","childContextTypes","options","execute","needRawState","env","Promise","reject","page","then","Page","resolve","getInitialState","init","error","setBasePath","basePath","loadMethodName","resolvePage","resolveServerModule","moduleId","require","resolveClientModule","Component","INIT","payload","REPLACE","Math","random","substr","ASYNC_PAGE_LOAD_ATTR","componentDidMount","initialState","renderPage","componentWillReceiveProps","nextProps","search","nextRequest","context","setState","token","guid","onRedirect","action","location","renderLoadingMessage","renderErrorMessage","rest","ready","pendding","content","React","displayName","contextTypes","any","defaultProps","event","next","PAGE_GET_INITIAL_STATE_GUID_ATTR","hasOwn","createPageComponent","PageComponent","eventName","split","map","term","charAt","toUpperCase","slice","toLowerCase","join","handleRequest","stage","componentWillUnmount","dispose","createElement","getCustomProps","result","middlewares","pageActionEventProxy","initialize","id","reducer","constructor","combineReducers","enhancer","compose","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","applyMiddleware","middleware","dispatch","View","view","getState","extend","proto","SubPage","Container","boundCallbacks","singletonCallbacks","instantiatedSingletons","registeredObjects","make","instances","instance","arguments","boundCallback","bind","factory","singleton","register","container","resource","get","actionTypes","actions"],"mappings":"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"}