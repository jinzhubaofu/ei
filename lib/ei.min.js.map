{"version":3,"file":"ei.min.js","sources":["../src/util/invariant.js","../src/actionCreator/page.js","../src/util/createPageComponent.js","../src/Emitter.js","../src/events.js","../src/Router.js","../src/env.js","../src/util/assign.js","../src/App.js","../src/util/createAppComponent.js","../src/util/guid.js","../src/component/Page.js","../src/middleware/pageActionEventProxy.js","../src/Page.js","../src/Container.js","../src/resource.js","../src/index.js"],"sourcesContent":["/**\n * @file invariant\n * @author Leon(leon@outlook.com)\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n/* eslint-disable max-params */\n\n/**\n * 断言\n *\n * @ignore\n *\n * @param {boolean}     condition 断言条件\n * @param {string}      format 断言失败消息模板\n * @param {*} a 断言失败消息数据\n * @param {*} b 断言失败消息数据\n * @param {*} c 断言失败消息数据\n * @param {*} d 断言失败消息数据\n * @param {*} e 断言失败消息数据\n * @param {*} f 断言失败消息数据\n */\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n\n    if (condition) {\n        return;\n    }\n\n    if (!format) {\n        throw new Error(''\n            + 'Minified exception occurred; use the non-minified dev environment '\n            + 'for the full error message and additional helpful warnings.'\n        );\n    }\n\n    const args = [a, b, c, d, e, f];\n    let argIndex = 0;\n\n    const message = ''\n        + 'Invariant Violation: '\n        + format.replace(/%s/g, function () {\n            return args[argIndex++];\n        });\n\n    throw new Error(message);\n\n}\n\n/* eslint-enable max-params */\n","/**\n * @file page init action creator\n * @author leon(ludafa@outlook.com)\n */\n\nexport const INIT = 'ei/INIT';\n\nexport function init(payload) {\n    return {\n        type: INIT,\n        payload\n    };\n}\n\nexport const REPLACE = 'ei/REPLACE';\n\nexport function replace(payload) {\n    return {\n        type: REPLACE,\n        payload\n    };\n}\n","/**\n * @file create a component class for Page\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PureComponent} from 'react';\nimport guid from '../util/guid';\nimport PropTypes from 'prop-types';\n\nconst PAGE_GET_INITIAL_STATE_GUID_ATTR = 'PAGE_GET_INITIAL_STATE_GUID_ATTR';\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport default function createPageComponent(Page) {\n\n    class PageComponent extends PureComponent {\n\n        static displayName = 'PageComponent';\n\n        constructor() {\n\n            super();\n\n            const {initialState} = this.props;\n\n            const page = this.page = new Page(initialState);\n\n            // 添加事件代理\n            page.on('*', (...args) => {\n\n                const eventName = page.getCurrentEvent()\n                    .split(/[\\-_]/)\n                    .map(term => term.charAt(0).toUpperCase() + term.slice(1).toLowerCase())\n                    .join('');\n\n                const handler = this.props[`on${eventName}`];\n\n                if (typeof handler === 'function') {\n                    handler.apply(this, args);\n                }\n\n            });\n\n            this.state = {\n                stage: initialState == null ? 'INITED' : 'LOADED',\n                error: null\n            };\n\n        }\n\n        componentDidMount() {\n\n            const {handleRequest, page, props} = this;\n            const stage = this.state.stage;\n\n            if (stage === 'LOADED') {\n                return;\n            }\n\n            handleRequest(page, props.request);\n\n        }\n\n\n        componentWillReceiveProps(nextProps) {\n\n            const request = this.props.request;\n            const nextRequest = nextProps.request;\n\n            if (request !== nextRequest) {\n                this.handleRequest(this.page, nextRequest);\n            }\n\n        }\n\n        componentWillUnmount() {\n            const page = this.page;\n            if (page) {\n                page.dispose();\n            }\n            this.page = null;\n        }\n\n        handleRequest(page, request) {\n\n            // 我们使用一个不会重复的 token 来完成 promise abort 的处理\n            // 每次我们发起异步请求时都会生成一个唯一的 token\n            // 当异步请求完成时会检查 token 是否还是一致的\n            // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了\n            const token = this[PAGE_GET_INITIAL_STATE_GUID_ATTR] = guid();\n\n            this.setState({\n                stage: 'LOADING',\n                error: null\n            });\n\n            Promise.resolve(page.getInitialState(request))\n                .then(state => {\n\n                    page.init(state);\n\n                    // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了！\n                    if (token === this[PAGE_GET_INITIAL_STATE_GUID_ATTR]) {\n                        this.setState({\n                            stage: 'LOADED'\n                        });\n                    }\n\n                }, error => {\n\n                    // 如果不是一致的（也就是在这次请求之后又发生了一次请求，token 就更新了），就算球了~\n                    if (token === this[PAGE_GET_INITIAL_STATE_GUID_ATTR]) {\n                        this.setState({\n                            error,\n                            stage: 'LOADED'\n                        });\n                    }\n\n                });\n        }\n\n        render() {\n\n            const {page, props} = this;\n            const {error, stage} = this.state;\n\n            const {\n                renderLoadingMessage,\n                renderErrorMessage\n            } = props;\n\n            if (error) {\n                return renderErrorMessage(error);\n            }\n\n            return stage === 'LOADED'\n                ? page.createElement(getCustomProps(props))\n                : renderLoadingMessage();\n\n        }\n\n    }\n\n    PageComponent.propTypes = {\n        initialState: PropTypes.object,\n        request: PropTypes.object,\n        renderLoadingMessage: PropTypes.func,\n        renderErrorMessage: PropTypes.func\n    };\n\n    PageComponent.defaultProps = {\n        initialState: null,\n        request: {},\n        renderLoadingMessage() {\n            return (\n                <div>loading...</div>\n            );\n        },\n        renderErrorMessage(error) {\n            return (\n                <div>{error.message}</div>\n            );\n        }\n    };\n\n    function getCustomProps(props) {\n\n        const result = {};\n\n        /* eslint-disable fecs-use-for-of */\n        for (const name in props) {\n            if (hasOwn.call(props, name) && !(name in PageComponent.propTypes)) {\n                result[name] = props[name];\n            }\n        }\n        /* eslint-enable fecs-use-for-of */\n\n        return result;\n\n    }\n\n    return PageComponent;\n\n}\n","/**\n * @file Emitter\n * @author Leon(leon@outlook.com)\n */\n\nconst EMITTER_LISTENER_POOL_ATTR = '__listeners__';\nconst EMITTER_CURRENT_EVENT_ATTR = '__event__';\n\nexport default class Emitter {\n\n    /**\n     * 添加事件处理函数\n     *\n     * @public\n     * @param {!string} name 事件名称\n     * @param {!Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    on(name, handler) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (!pool) {\n            pool = this[EMITTER_LISTENER_POOL_ATTR] = {};\n        }\n\n        let listeners = pool[name];\n\n        if (!listeners) {\n            listeners = pool[name] = [];\n        }\n\n        listeners.push(handler);\n\n        return this;\n    }\n\n    /**\n     * 取消事件处理\n     *\n     * @public\n     * @param {?string} name 事件名称\n     * @param {?Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    off(name, handler) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (!pool) {\n            return this;\n        }\n\n        if (!name) {\n            return this.destroyEvents();\n        }\n\n        const listeners = pool[name];\n\n        if (!listeners || !listeners.length) {\n            return this;\n        }\n\n        // 没有指定移除的回调函数，那么移除所有的\n        if (!handler) {\n            listeners.length = 0;\n            pool[name] = [];\n            return this;\n        }\n\n        // 找到指定的回调函数，移除它\n        for (let i = listeners.length - 1; i >= 0; --i) {\n            if (listeners[i] === handler) {\n                listeners.splice(i, 1);\n                return this;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * 添加一个只回调一次的事件处理函数\n     *\n     * @public\n     * @param {!string} name 事件类型\n     * @param {!Function} handler 事件处理函数\n     * @return {module:Emitter}\n     */\n    once(name, handler) {\n\n        const me = this;\n\n        function onceHandler(...args) {\n            me.off(name, onceHandler);\n            return handler.apply(me, args);\n        }\n\n        me.on(name, onceHandler);\n\n        return this;\n\n    }\n\n\n    /**\n     * 释放事件\n     *\n     * @public\n     * @param {string} name 事件名称\n     * @param {...*}   args 事件附带参数\n     * @return {module:Emitter}\n     */\n    emit(name, ...args) {\n\n        let pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        // 连pool都没有，那真是一个回调都没有，那么直接返回\n        if (!pool) {\n            return this;\n        }\n\n        // 把*和指定事件类型的事件回调合并在一起\n        const listeners = [].concat(pool[name] || [], pool['*'] || []);\n\n        // 如果没有回调函数，那么直接返回\n        if (!listeners.length) {\n            return this;\n        }\n\n        this[EMITTER_CURRENT_EVENT_ATTR] = name;\n\n        for (let i = 0, len = listeners.length; i < len; ++i) {\n            listeners[i].apply(this, args);\n        }\n\n        this[EMITTER_CURRENT_EVENT_ATTR] = null;\n\n        return this;\n\n    }\n\n    /**\n     * 获取当前正在派发的事件\n     *\n     * @public\n     * @return {?string}\n     */\n    getCurrentEvent() {\n        return this[EMITTER_CURRENT_EVENT_ATTR];\n    }\n\n    /**\n     * 销毁所有的事件\n     *\n     * @public\n     * @return {module:Emitter}\n     */\n    destroyEvents() {\n\n        const pool = this[EMITTER_LISTENER_POOL_ATTR];\n\n        if (pool) {\n\n            /* eslint-disable fecs-use-for-of */\n            for (let type in pool) {\n                if (pool[type]) {\n                    pool[type].length = 0;\n                    pool[type] = null;\n                }\n            }\n            /* eslint-enable fecs-use-for-of */\n\n            this[EMITTER_LISTENER_POOL_ATTR] = null;\n\n        }\n\n        return this;\n\n    }\n\n}\n","/**\n * @file ei系统消息总线\n * @author Leon(leon@outlook.com)\n * @module events\n */\n\nimport Emitter from './Emitter';\n\nexport default new Emitter();\n","/**\n * @file Router\n * @author Leon(leon@outlook.com)\n */\n\nexport default class Router {\n\n    /**\n     * 简易的路由器\n     *\n     * @constructor Router\n     * @param {Array.<Object>} routes 路由配置\n     */\n    constructor(routes = []) {\n        this.routes = routes;\n    }\n\n    /**\n     * 对一个请求进行路由\n     *\n     * @param {!Object} request 请求对象\n     * @return {?Object}\n     */\n    route(request) {\n        for (let i = this.routes.length - 1; i >= 0; i--) {\n            let route = this.routes[i];\n            if (route.path === request.pathname) {\n                return route;\n            }\n        }\n    }\n\n    /**\n     * 添加路由配置\n     *\n     * @param {!Object} config 配置\n     * @return {module:Route}\n     */\n    addRoute(config) {\n        this.routes.push(config);\n        return this;\n    }\n\n}\n","/**\n * @file 环境探测\n * @author Leon(leon@outlook.com)\n * @module env\n * @inner\n */\n\n/**\n * 是否为服务器端环境\n *\n * @member {boolean}\n */\nlet isServer = false;\n\n/**\n * 是否为客户端环境\n *\n * @member {boolean}\n */\nlet isClient = false;\n\ntry {\n    isServer = (\n        'object' === typeof process\n        && Object.prototype.toString.call(process) === '[object process]'\n    );\n    isClient = !isServer;\n}\ncatch (e) {\n    isClient = true;\n}\n\n\nexport {\n    isServer,\n    isClient\n};\n","/**\n * @file es6 Object.assign polyfill\n * @author leon(ludafa@outlook.com)\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default Object.assign || function (target, ...sources) {\n\n    if (target == null) {\n        throw new Error('assign target cannot be null');\n    }\n\n    for (let i = 0, len = sources.length; i < len; ++i) {\n\n        const source = sources[i];\n\n        if (typeof source !== 'object') {\n            continue;\n        }\n\n        /* eslint-disable fecs-use-for-of */\n        for (let key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n        /* eslint-enable fecs-use-for-of */\n\n    }\n\n    return target;\n};\n","/**\n * @file App\n * @author Leon(leon@outlook.com)\n */\n\nimport invariant from './util/invariant';\nimport events from './events';\nimport Router from './Router';\nimport * as env from './env';\nimport assign from './util/assign';\nimport createAppComponent from './util/createAppComponent';\n\n/* eslint-disable fecs-prefer-class */\n\n/**\n * App\n *\n * @constructor\n * @param {!Object} options 参数\n * @param {Array.Object} options.routes 路由配置\n */\nexport default class App {\n\n    static Component = createAppComponent(App);\n\n    constructor(options = {}) {\n\n        invariant(options, 'App need options');\n        invariant(options.routes || options.router, 'App need routes/router');\n\n        assign(this, options);\n\n        /**\n         * 路由器\n         *\n         * @member {module:Router}\n         */\n        this.router = this.router || new Router(this.routes);\n    }\n\n    /**\n     * 处理一个请求\n     *\n     * @param {!Object}  request      请求\n     * @param {boolean}  needRawState 是否需要未经加工的page数据\n     * @return {Promise}\n     *\n     * @fires module:events~app-request\n     * @fires module:events~app-get-initial-state\n     * @fires module:events~app-get-initial-state-succeed\n     * @fires module:events~app-get-initial-state-failed\n     * @fires module:events~app-response-in-json\n     * @fires module:events~app-response-in-html\n     * @fires module:events~app-page-loaded\n     * @fires module:events~app-page-bootstrap\n     * @fires module:events~app-page-bootstrap-succeed\n     */\n    execute(request, needRawState) {\n\n        invariant(env.isServer, 'App.execute() must run on server');\n\n        /**\n         * @event module:events~app-request\n         */\n        events.emit('app-request');\n\n        const route = this.route(request);\n\n        if (!route) {\n            return Promise.reject({\n                status: 404\n            });\n        }\n\n        return this\n\n            // 加载页面模块\n            .loadPage(route.page)\n\n            // 加载初始化数据\n            .then(Page => {\n\n                const page = new Page();\n\n                return Promise\n                    // 这里一定要用 Promise 包裹一下，这个接口可以返回 Promise 或者是 *\n                    .resolve(page.getInitialState(request))\n                    .then(state => {\n\n                        if (needRawState) {\n\n                            /**\n                             * @event module:events~app-response-in-json\n                             */\n                            events.emit('app-response-in-json');\n\n                            return {\n                                state,\n                                route\n                            };\n\n                        }\n\n                        /**\n                         * @event module:events~app-response-in-html\n                         */\n                        events.emit('app-response-in-html');\n\n                        // 触发 page 的初始归并\n                        page.init(state);\n\n                        /**\n                         * @event module:events~app-page-bootstrap\n                         */\n                        events.emit('app-page-bootstrap');\n\n                        /**\n                         * @event module:events~app-page-bootstrap\n                         */\n                        events.emit('app-page-entered');\n\n                        return {\n                            page,\n                            route\n                        };\n\n                    });\n\n            })\n            .catch(function (error) {\n                events.emit('app-execute-error', error);\n                throw error;\n            });\n\n    }\n\n    /**\n     * 根目录路径\n     *\n     * @public\n     *\n     * @param {!string} basePath 根目录路径\n     *\n     * @return {module:App}\n     */\n    setBasePath(basePath) {\n        this.basePath = basePath;\n        return this;\n    }\n\n    /**\n     * 加载Page类\n     *\n     * @protected\n     *\n     * @param {!string} page 页面模块路径\n     *\n     * @return {Promise}\n     *\n     * @fires module:events~app-page-loaded\n     * @fires module:events~app-load-page-on-server\n     * @fires module:events~app-load-page-on-client\n     */\n    loadPage(page) {\n\n        if (typeof page === 'function') {\n            return Promise.resolve(page);\n        }\n\n        const pool = this.pool;\n\n        if (pool && pool[page]) {\n\n            /**\n             * @event module:events~app-page-loaded\n             */\n            events.emit('app-page-loaded');\n\n            return Promise.resolve(pool[page]);\n        }\n\n        const loadMethodName = env.isServer ? 'resolveServerModule' : 'resolveClientModule';\n\n        return this[loadMethodName](page).then(Page => this.resolvePage(Page));\n\n    }\n\n    /**\n     * 解析 Page 类\n     *\n     * @protected\n     *\n     * @param {Object|Function} Page 页面模块\n     *\n     * @return {Promise}\n     */\n    resolvePage(Page) {\n\n        // @hack\n        // 这种是 commonjs/amd 直接返回的 Page\n        if (typeof Page === 'function') {\n            return Page;\n        }\n\n        // 这种是 export default 输出的\n        return Page.default;\n\n    }\n\n    /**\n     * 服务器端加载Page模块\n     *\n     * @private\n     *\n     * @param {string} moduleId Page模块id\n     *\n     * @return {Promise}\n     */\n    resolveServerModule(moduleId) {\n\n        /**\n         * @event module:events~app-load-page-on-server\n         */\n        events.emit('app-load-page-on-server', moduleId);\n\n        const basePath = this.basePath;\n\n        invariant(basePath, 'ei need a basePath to resolve your page');\n\n        const path = basePath + '/' + moduleId;\n\n        return new Promise((resolve, reject) => {\n\n            try {\n\n                /* eslint-disable */\n                const Page = require(path);\n                /* eslint-enable */\n\n                let pool = this.pool;\n\n                if (!pool) {\n                    pool = this.pool = {};\n                }\n\n                pool[moduleId] = Page;\n\n                resolve(Page);\n            }\n            catch (e) {\n                reject(e);\n            }\n\n        });\n\n    }\n\n    /**\n     * 在客户端上加载Page模块\n     *\n     * @private\n     *\n     * @param {string} moduleId Page模块id\n     *\n     * @return {Promise}\n     */\n    resolveClientModule(moduleId) {\n\n        /**\n         * @event module:events~app-load-page-on-client\n         */\n        events.emit('app-load-page-on-client');\n\n        if (!moduleId) {\n            return Promise.reject(new Error('need page module id'));\n        }\n\n        return new Promise(function (resolve, reject) {\n\n            window.require([moduleId], function (Page) {\n                resolve(Page);\n            });\n\n        });\n\n    }\n\n    /**\n     * 路由\n     *\n     * @protected\n     *\n     * @param {!Object} request 请求\n     *\n     * @return {?Object}\n     *\n     * @fires module:events~app-route-succeed\n     * @fires module:events~app-route-succeed\n     * @fires module:events~app-route-failed\n     */\n    route(request) {\n\n        /**\n         * @event module:events~app-route\n         */\n        events.emit('app-route');\n\n        const config = this.router.route(request);\n\n        if (config) {\n\n            /**\n             * @event module:events~app-route-succeed\n             */\n            events.emit('app-route-succeed');\n\n        }\n        else {\n\n            /**\n             * @event module:events~app-route-failed\n             */\n            events.emit('app-route-failed', request);\n        }\n\n        return config;\n\n    }\n}\n","/**\n * @file create app component\n * @author leon(ludafa@outlook.com)\n */\n\nimport {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function createAppComponent(App) {\n\n    class AppComponent extends PureComponent {\n\n        static propTypes = {\n            routes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    path: PropTypes.string.isRequired,\n                    page: PropTypes.oneOfType([\n                        PropTypes.string,\n                        PropTypes.func\n                    ]).isRequired\n                })\n            ),\n            app: PropTypes.instanceOf(App),\n            router: PropTypes.object\n        };\n\n        static childContextTypes = {\n            route: PropTypes.func,\n            loadPage: PropTypes.func\n        };\n\n        constructor() {\n\n            super();\n\n            const {routes, router, app} = this.props;\n\n            this.app = app || new App({routes, router});\n\n            this.state = {};\n\n        }\n\n        getChildContext() {\n\n            const app = this.app;\n\n            return {\n                route(request) {\n                    return app.route(request);\n                },\n                loadPage(pageModuleId) {\n                    return app.loadPage(pageModuleId);\n                }\n            };\n\n        }\n\n        render() {\n            return this.props.children;\n        }\n    }\n\n    return AppComponent;\n\n}\n","/**\n * @file guid\n * @author leon(ludafa@outlook.com)\n */\n\nexport default function () {\n    return Math.random().toString(36).substr(2, 12);\n}\n","/**\n * @file 可进行路由的 Page\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport guid from '../util/guid';\n\nconst ASYNC_PAGE_LOAD_ATTR = 'ASYNC_PAGE_LOAD_ATTR';\n\n/* eslint-disable fecs-prefer-class */\n\nexport default class Page extends PureComponent {\n\n    static displayName = 'Page';\n\n    static contextTypes = {\n        route: PropTypes.func,\n        loadPage: PropTypes.func\n    };\n\n    static propTypes = {\n        request: PropTypes.shape({\n            pathname: PropTypes.string.isRequired,\n            query: PropTypes.object,\n            search: PropTypes.string\n        }),\n        initialState: PropTypes.any,\n        renderLoadingMessage: PropTypes.func,\n        renderErrorMessage: PropTypes.func\n    };\n\n    static defaultProps = {\n\n        renderErrorMessage(error) {\n            return (\n                <span>{error.message}</span>\n            );\n        },\n\n        renderLoadingMessage() {\n            return (<span>loading...</span>);\n        }\n\n    };\n\n    state = {\n        pendding: false,\n        ready: false,\n        error: null\n    };\n\n    componentDidMount() {\n        let {initialState, request} = this.props;\n        this.renderPage(request, initialState);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const request = this.props.request || {};\n        const {pathname, search} = request;\n        const nextRequest = nextProps.request;\n\n        if (\n            request !== nextRequest\n            && (pathname !== nextRequest.pathname || search !== nextRequest.search)\n        ) {\n            this.renderPage(nextRequest, null);\n        }\n\n    }\n\n    renderPage(request, initialState) {\n\n        const route = this.context.route(request);\n\n        if (!route) {\n\n            this.setState({\n                ready: false,\n                error: {\n                    status: 404,\n                    message: '啊哦，这个页面迷失在了茫茫宇宙中。。。'\n                },\n                pendding: false,\n                Page: null\n            });\n\n            return;\n        }\n\n        this.setState({\n            pendding: true,\n            error: null,\n            ready: false\n        });\n\n        const token = this[ASYNC_PAGE_LOAD_ATTR] = guid();\n\n        this\n            .context\n            .loadPage(route.page)\n            .then(Page => {\n\n                // 对照 token\n                // 如果 token 未变化，才能进行渲染\n                // 如果 token 已发生变化 ，那么吞掉渲染\n                if (token === this[ASYNC_PAGE_LOAD_ATTR]) {\n                    this.setState({\n                        Page,\n                        error: null,\n                        pendding: false,\n                        ready: true\n                    });\n                }\n\n            })\n            ['catch'](error => {\n\n                // 对照 token\n                // 如果 token 未变化，才能进行渲染\n                // 如果 token 已发生变化 ，那么吞掉渲染\n                if (token === this[ASYNC_PAGE_LOAD_ATTR]) {\n                    this.setState({\n                        error,\n                        ready: false,\n                        pendding: false,\n                        Page: null\n                    });\n                }\n\n            });\n\n    }\n\n    onRedirect(action) {\n\n        const onRedirect = this.props.onRedirect;\n\n        if (onRedirect) {\n            onRedirect(action);\n            return;\n        }\n\n        this.renderPage(action.payload.location);\n\n    }\n\n    render() {\n\n        const {\n            request,\n            renderLoadingMessage,\n            renderErrorMessage,\n            ...rest\n        } = this.props;\n\n        const {ready, pendding, Page, error} = this.state;\n\n        let state = 'blank';\n        let content = null;\n\n        // 如果 request 是空的，那么我们认为它相当于 iframe src=\"about:blank\"\n        if (request != null) {\n\n            if (error) {\n                content = renderErrorMessage(error);\n                state = 'error';\n            }\n            else if (pendding) {\n                content = renderLoadingMessage();\n                state = 'pendding';\n            }\n            else if (ready) {\n                try {\n                    content = (\n                        <Page.Component\n                            {...rest}\n                            renderLoadingMessage={renderLoadingMessage}\n                            renderErrorMessage={renderErrorMessage}\n                            onRedirect={this.onRedirect}\n                            request={request} />\n                    );\n                    state = 'ready';\n                }\n                catch (e) {\n                    content = renderErrorMessage(e);\n                    state = 'error';\n                }\n            }\n        }\n\n        return (\n            <div className={`ui-page state-${state}`}>\n                {content}\n            </div>\n        );\n\n    }\n\n}\n","/**\n * @file page action event proxy\n * @author leon(ludafa@outlook.com)\n */\n\nexport default function (page) {\n\n    return store => next => action => {\n\n        if (typeof action !== 'function') {\n            let {event, type} = action;\n            page.emit(event || type, action);\n        }\n\n        return next(action);\n\n    };\n\n}\n","/**\n * @file 页面\n * @author Leon(leon@outlook.com)\n *\n * @requires react\n */\n\nimport React from 'react';\nimport assign from './util/assign';\nimport {REPLACE, replace, init} from './actionCreator/page';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux';\nimport invariant from './util/invariant';\nimport guid from './util/guid';\nimport events from './events';\nimport Emitter from './Emitter';\nimport PageComponent from './component/Page';\nimport pageActionEventProxy from './middleware/pageActionEventProxy';\nimport createPageComponent from './util/createPageComponent';\nimport * as env from './env';\n\nexport default class Page extends Emitter {\n\n    /**\n     * 生成Page子类\n     *\n     * @param {!Object} proto 扩展Page的配置\n     * @return {Function}\n     */\n    static extend = function (proto) {\n\n        invariant(proto, 'create Page need options');\n\n        invariant(proto.reducer, 'Pager must have a reducer');\n\n        invariant(proto.view, 'Pager must have a view');\n\n        /**\n         * SubPage\n         *\n         * @class\n         * @param {*} initialState 脱水状态\n         */\n        class SubPage extends Page {\n        }\n\n        assign(SubPage.prototype, proto);\n\n        SubPage.Component = createPageComponent(SubPage);\n\n        return SubPage;\n\n    };\n\n    static Component = PageComponent;\n\n    /**\n     * 页面\n     *\n     * @constructor\n     * @param {*} initialState 初始数据状态\n     */\n    constructor(initialState) {\n        super();\n        this.middlewares = [\n            pageActionEventProxy\n        ];\n        this.initialize(initialState);\n    }\n\n    /**\n     * 构造函数\n     *\n     * @param {*} initialState 初始数据\n     */\n    initialize(initialState) {\n\n        this.id = guid();\n\n        let reducer = this.reducer || this.constructor.reducer;\n\n        if (typeof reducer === 'object') {\n            reducer = combineReducers(this.reducer);\n        }\n\n        let enhancer = compose;\n\n        if (\n            process.env.NODE_ENV !== 'production'\n            && env.isClient\n            && window\n            && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ) {\n            enhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                name: `ei-page@${this.id}`\n            });\n        }\n\n        this.context = createStore(\n            (state, action) => {\n                if (action.type === REPLACE) {\n                    return action.payload;\n                }\n                return reducer(state, action);\n            },\n            initialState,\n            enhancer(\n                applyMiddleware(\n                    ...this.middlewares.map(middleware => middleware(this))\n                )\n            )\n        );\n\n    }\n\n    /**\n     * 初始化\n     *\n     * 此方法只会被调用一次\n     *\n     * 处理请求的过程中，在页面实例化后，会被调用到此方法\n     *\n     * 此方法会派发一个init动作，并附带有getInitialState方法所返回的数据\n     *\n     * init动作提供给页面的初始数据剪裁的时机\n     *\n     * 但是只有在execute的情况下才会被调用，\n     * 我们在bootstrap时传入的initialState是已经是剪裁好的数据\n     * 也就是在server端预渲染后向client端同步数据状态的场景\n     *\n     *\n     * @TODO 通过page的stage来保证此动作只能触发一次\n     *\n     * @public\n     * @param {*} initialState 初始状态\n     * @return {module:Page}\n     */\n    init(initialState) {\n        this.dispatch(init(initialState));\n        return this;\n    }\n\n    /**\n     * 使用当前上下文中的数据，创建一个可提渲染使用的react元素\n     *\n     * @public\n     *\n     * @param {?Object} props 视图属性\n     * @notice 此参数一般不需要使用，只有在 Page 作为子组件时使用\n     * @return {ReactElement}\n     */\n    createElement(props) {\n\n        const context = this.context;\n        const View = this.view || this.constructor.view;\n\n        return (\n            <Provider store={context}>\n                <View {...props} />\n            </Provider>\n        );\n\n    }\n\n    /**\n     * 返回当前上下文中的所有数据\n     *\n     * 此方法用于将服务器端的页面数据，同步到客户端上\n     *\n     * @public\n     *\n     * @return {*}\n     */\n    getState() {\n        return this.context.getState();\n    }\n\n    /**\n     * 设置当前上下文中的所有数据\n     *\n     * @param {*} state 数据\n     * @return {module:Page}\n     */\n    setState(state) {\n        this.context.dispatch(replace(state));\n        return this;\n    }\n\n    /**\n     * 派发一个动作，激活相应的数据剪切和视图更新\n     *\n     * @public\n     *\n     * @method module:Page#dispatch\n     *\n     * @param {(Object | Function)} action 动作\n     *\n     * @return {Object}\n     *\n     * @fires module:events~page-dispatch\n     */\n    dispatch(action) {\n\n        /**\n         * @event module:events~page-dispatch\n         * @param {(Object | Function)} action 动作\n         */\n        events.emit('page-dispatch', action);\n\n        this.emit('dispatch', action);\n\n        this.context.dispatch(action);\n\n        return action;\n\n    }\n\n    /**\n     * 获取页面初始数据\n     *\n     * 页面在启动时，一般都会需要通过操作资源来获取数据作为初始数据\n     *\n     * 并且，这个过程一般还需要使用当前`请求`来完成决策\n     *\n     * 在app中接收到请求后会加载路由中指定的Page模块，将其实例化后，执行此方法\n     *\n     * @todo page需要有一个状态标识，new / inited / rendered / disposed\n     *\n     * @public\n     *\n     * @param {Object} request 请求\n     *\n     * @return {Promise}\n     */\n    getInitialState(request) {\n        return {};\n    }\n\n    /**\n     * 销毁页面\n     *\n     * @return {module:Page}\n     */\n    dispose() {\n\n        /**\n         * @event module:event~page-dispose\n         */\n        events.emit('page-dispose');\n\n        this.emit('dispose');\n\n        // @TODO 补充销毁时的必要处理\n\n        return this;\n    }\n\n}\n","/**\n * @file bean container copy from inverse\n * @author Leon(leon@outlook.com)\n */\n\nexport default class Container {\n\n    /**\n     * IOC窗口\n     *\n     * @constructor Container\n     */\n    constructor() {\n        this.boundCallbacks = {};\n        this.singletonCallbacks = {};\n        this.instantiatedSingletons = {};\n        this.registeredObjects = {};\n    }\n\n    /**\n     * 生成一个指定的实例\n     *\n     * @public\n     * @param {!string} name 资源标识符\n     * @return {*}\n     */\n    make(name) {\n\n        /* eslint-disable prefer-rest-params */\n\n        if (this.registeredObjects[name]) {\n            return this.registeredObjects[name];\n        }\n\n        if (this.singletonCallbacks[name]) {\n\n            const instances = this.instantiatedSingletons;\n            let instance = instances[name];\n\n            if (!instance) {\n                instance\n                    = instances[name]\n                    = this.singletonCallbacks[name].apply(this, arguments);\n            }\n\n            return instance;\n        }\n\n\n        const boundCallback = this.boundCallbacks[name];\n\n        return boundCallback ? boundCallback.apply(this, arguments) : null;\n\n        /* eslint-enable prefer-rest-params */\n\n    }\n\n    /**\n     * 绑定一个factory\n     *\n     * 当请求这个资源时会通过factory生成新的实例\n     * 每次都会生成一个新的实例\n     *\n     * @param {!string}   name    资源标识符\n     * @param {!Function} factory 工厂函数\n     * @return {module:Container}\n     */\n    bind(name, factory) {\n        this.boundCallbacks[name] = factory;\n        return this;\n    }\n\n    /**\n     * 注册一个单例资源\n     *\n     * 当请求这个资源时会通过factory生成新的实例\n     * 但是只会生成一个此类资源\n     *\n     * @param {!string}   name    资源标识符\n     * @param {!Function} factory 资源工厂函数\n     * @return {module:Container}\n     */\n    singleton(name, factory) {\n        this.singletonCallbacks[name] = factory;\n        return this;\n    }\n\n    /**\n     * 注册一个资源\n     *\n     * 这个与bind和singleton的区别是，\n     * 这里直接注册一个资源，给的是个object，而不是工厂函数\n     * 不会经过工厂函数创建资源实例了\n     *\n     * @param {!string} name   资源标识符\n     * @param {*}       object 资源对象\n     * @return {module:Container}\n     */\n    register(name, object) {\n        this.registeredObjects[name] = object;\n        return this;\n    }\n\n}\n","/**\n * @file 资源容器\n *\n * 我们知道在客户端上，我们只能使用ajax/socket两种途径操纵资源\n * 而在服务器端上，可选的资源服务非常多，比如mysql/mongodb/redis或者他们数据服务\n *\n * 因此，我们提供了这个模块，用来处理资源在不同平台上的差异性\n *\n * 我们通过ioc容器来对资源依赖进行解耦，\n *\n * 在不同平台上注入相同接口的资源操纵对象，\n *\n * 在同构代码中使用`get`方法获取到这些对象，直接使用即可\n *\n * @author Leon(leon@outlook.com)\n * @module resource\n */\n\nimport Container from './Container';\n\nconst container = new Container();\n\n/**\n * 注册一个资源操作对象\n *\n * @method module:Resource.reigist\n *\n * @param {!string} type 资源标识符\n * @param {(Object | Function)} resource 资源操纵对象\n *\n * @return {module:Resource}\n */\nexport function register(type, resource) {\n    container.register(type, resource);\n    return this;\n}\n\n/**\n * 获取一个资源操作对象\n *\n * @method module:Resource.get\n *\n * @param {!string} type 资源标识符\n *\n * @return {(Object | Function)}\n */\nexport function get(type) {\n    return container.make(type);\n}\n","/**\n * @file ei主入口\n * @author Leon(leon@outlook.com)\n * @module ei\n */\n\nimport App from './App';\nimport Page from './Page';\nimport Container from './Container';\nimport events from './events';\nimport * as resource from './resource';\n\nimport {\n    INIT,\n    REPLACE,\n    init,\n    replace\n} from './actionCreator/page';\n\nexport {\n    App,\n    Page,\n    Container,\n    events,\n    resource\n};\n\nexport const actionTypes = {\n    INIT,\n    REPLACE\n};\n\nexport const actions = {\n    init,\n    replace\n};\n"],"names":["Error","args","argIndex","message","format","replace","result","name","hasOwn","call","PageComponent","propTypes","props","initialState","page","on","eventName","getCurrentEvent","split","map","term","charAt","toUpperCase","slice","toLowerCase","join","handler","apply","state","componentDidMount","handleRequest","stage","request","componentWillReceiveProps","nextRequest","nextProps","componentWillUnmount","dispose","token","guid","setState","resolve","getInitialState","then","init","render","error","renderLoadingMessage","renderErrorMessage","createElement","getCustomProps","PureComponent","displayName","PropTypes","object","func","defaultProps","React","EMITTER_LISTENER_POOL_ATTR","EMITTER_CURRENT_EVENT_ATTR","Emitter","pool","listeners","push","off","destroyEvents","length","i","splice","once","me","emit","concat","len","type","Router","routes","route","path","pathname","addRoute","isServer","isClient","process","Object","prototype","toString","hasOwnProperty","assign","target","sources","key","source","App","options","router","execute","loadPage","Promise","reject","setBasePath","basePath","loadMethodName","env","resolvePage","Page","resolveServerModule","require","resolveClientModule","config","Component","AppComponent","app","getChildContext","children","arrayOf","shape","string","isRequired","oneOfType","instanceOf","childContextTypes","createAppComponent","INIT","REPLACE","Math","random","substr","ASYNC_PAGE_LOAD_ATTR","renderPage","search","context","onRedirect","action","payload","location","rest","ready","pendding","content","className","contextTypes","any","event","next","PAGE_GET_INITIAL_STATE_GUID_ATTR","middlewares","initialize","id","reducer","constructor","combineReducers","enhancer","compose","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","applyMiddleware","middleware","dispatch","View","view","store","getState","extend","proto","SubPage","createPageComponent","Container","boundCallbacks","singletonCallbacks","instantiatedSingletons","registeredObjects","make","instances","instance","arguments","boundCallback","bind","singleton","register","container"],"mappings":"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"}